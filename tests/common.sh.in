set -e

export TEST_ROOT=$(realpath ${TMPDIR:-/tmp}/nix-test)/${TEST_NAME:-default}
export NIX_STORE_DIR
if ! NIX_STORE_DIR=$(readlink -f $TEST_ROOT/store 2> /dev/null); then
    # Maybe the build directory is symlinked.
    export NIX_IGNORE_SYMLINK_STORE=1
    NIX_STORE_DIR=$TEST_ROOT/store
fi
export NIX_LOCALSTATE_DIR=$TEST_ROOT/var
export NIX_LOG_DIR=$TEST_ROOT/var/log/nix
export NIX_STATE_DIR=$TEST_ROOT/var/nix
export NIX_CONF_DIR=$TEST_ROOT/etc
export NIX_DAEMON_SOCKET_PATH=$TEST_ROOT/daemon-socket
unset NIX_USER_CONF_FILES
export _NIX_TEST_SHARED=$TEST_ROOT/shared
if [[ -n $NIX_STORE ]]; then
    export _NIX_TEST_NO_SANDBOX=1
fi
export _NIX_IN_TEST=$TEST_ROOT/shared
export _NIX_TEST_NO_LSOF=1
export NIX_REMOTE=$NIX_REMOTE_
unset NIX_PATH
export TEST_HOME=$TEST_ROOT/test-home
export HOME=$TEST_HOME
unset XDG_CONFIG_HOME
unset XDG_CONFIG_DIRS
unset XDG_CACHE_HOME
mkdir -p $TEST_HOME

export PATH=@bindir@:$PATH
coreutils=@coreutils@

export dot=@dot@
export SHELL="@bash@"
export PAGER=cat
export HAVE_SODIUM="@HAVE_SODIUM@"
export busybox="@sandbox_shell@"

export version=@PACKAGE_VERSION@
export system=@system@

cacheDir=$TEST_ROOT/binary-cache

readLink() {
    ls -l "$1" | sed 's/.*->\ //'
}

clearProfiles() {
    profiles="$NIX_STATE_DIR"/profiles
    rm -rf $profiles
}

clearStore() {
    echo "clearing store..."
    chmod -R +w "$NIX_STORE_DIR"
    rm -rf "$NIX_STORE_DIR"
    mkdir "$NIX_STORE_DIR"
    rm -rf "$NIX_STATE_DIR"
    mkdir "$NIX_STATE_DIR"
    nix-store --init
    clearProfiles
}

clearCache() {
    rm -rf "$cacheDir"
}

clearCacheCache() {
    rm -f $TEST_HOME/.cache/nix/binary-cache*
}

startDaemon() {
    # Start the daemon, wait for the socket to appear.  !!!
    # ‘nix-daemon’ should have an option to fork into the background.
    rm -f $NIX_STATE_DIR/daemon-socket/socket
    nix-daemon &
    for ((i = 0; i < 30; i++)); do
        if [ -e $NIX_DAEMON_SOCKET_PATH ]; then break; fi
        sleep 1
    done
    pidDaemon=$!
    trap "kill -9 $pidDaemon" EXIT
    export NIX_REMOTE=daemon
}

killDaemon() {
    kill -9 $pidDaemon
    wait $pidDaemon || true
    trap "" EXIT
}

startIpfs() {
    # To see if ipfs is connected to the network, we check if we can see some peers
    # other than ourselves.
    if (! (ipfs log ls))
    then
        test ! -f .ipfs/api
        echo "Ipfs daemon not detected; initializing.."
        ipfs init --profile=randomports
        # TODO unix domain socket
        IPFS_GATEWAY_PORT=$(shuf -i 2000-65000 -n 1)
        mv ~/.ipfs/config{,.old}
        jq ".Addresses.Gateway = \"/ip4/127.0.0.1/tcp/$IPFS_GATEWAY_PORT"\" \
            < ~/.ipfs/config.old > ~/.ipfs/config
        #jq ".Addresses.API = \"/unix/$HOME/ipfs-api.sock\"" \
        #    < ~/.ipfs/config.1 > ~/.ipfs/config.2
        rm ~/.ipfs/config.old
        ipfs daemon --offline &
        trap "ipfs shutdown" EXIT
        while [ ! -e ${HOME}/.ipfs/api ]
        do
           echo "Waiting for IPFS to start";
           sleep 1
        done
        stat ~/.ipfs/api
    fi
}

simpleFileIpfs() {
    [ ! -f simple-file ]
    echo "this made it to ipfs" > simple-file
    local body rewrite ca cid
    body=$(nix add-to-store simple-file)
    rewrite=$(nix --experimental-features 'nix-command ca-references' make-content-addressable --ipfs --json -r $body | jq -r ".rewrites[\"$body\"]")
    ca=$(nix path-info --json $rewrite | jq -r '.[0].ca')
    cid=$(echo $ca | sed s,^ipfs:,,)
    [ "$cid" = f01711220d86887a477e7c55ca39bedc5df7215afb7bfd38e42f7e16f4c96695f4fe25d4f ]
    rm simple-file
}

if [[ $(uname) == Linux ]] && [[ -L /proc/self/ns/user ]] && unshare --user true; then
    _canUseSandbox=1
fi

canUseSandbox() {
    if [[ ! $_canUseSandbox ]]; then
        echo "Sandboxing not supported, skipping this test..."
        return 1
    fi

    return 0
}

fail() {
    echo "$1"
    exit 1
}

expect() {
    local expected res
    expected="$1"
    shift
    set +e
    "$@"
    res="$?"
    set -e
    [[ $res -eq $expected ]]
}

set -x
